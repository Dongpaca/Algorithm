#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
using namespace std;

struct INFO {
	int x, y;
};
int n, m , c;
int k;
int dx[4] = { 0,0,1,-1 };
int dy[4] = { 1,-1,0,0 };
int answer;
int map[10][10];
bool visit[10][10];
vector<int> p[2];
int tmax1, tmax2;
void cal1(int idx, int weight, int sum)
{
	if (weight > c)
		return;
	if (idx == p[0].size()) {
		//계산
		tmax1 = max(sum, tmax1);
		return;
	}
	if(p[0][idx] + weight <= c)
		cal1(idx + 1, p[0][idx] + weight, sum + p[0][idx] * p[0][idx]);
	cal1(idx + 1, weight, sum);

	return;
}
void cal2(int idx, int weight, int sum)
{
	if (weight > c)
		return;
	if (idx == p[1].size()) {
		//계산
		tmax2 = max(sum, tmax2);
		return;
	}

	if (p[1][idx] + weight <= c)
		cal2(idx + 1, p[1][idx] + weight, sum + p[1][idx] * p[1][idx]);
	cal2(idx + 1, weight, sum);

	return;
}
void bfs(int x, int y, int z)
{
	queue<INFO> q;
	q.push({ x,y });
	visit[x][y] = true;
	p[z].push_back(map[x][y]);
	int cnt = 1;
	while (!q.empty()) {
		int x = q.front().x, y = q.front().y;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i], ny = y + dy[i];
			if (nx < 0 || nx >= n || ny < 0 || ny >= n) continue;
			if (visit[nx][ny] == true) continue;
			if (cnt >= m) continue;
			cnt++;
			q.push({ nx,ny });
			visit[nx][ny] = true;
			p[z].push_back(map[nx][ny]);
		}
	}
}
void dfs2(int x, int y, int cnt)
{
	visit[x][y] = true;
	if (cnt == m) {
		
		cal1(0, 0, 0);
		if (tmax1 == 163)
			int b = 0;
		cal2(0, 0, 0);
		answer = max(answer, tmax1 + tmax2);
		if (answer == 307)
			int b = 0;
		return;
	}

	int nx = x + dx[0], ny = y + dy[0];
	if (visit[nx][ny] == true) return;
	if (nx < 0 || nx >= n || ny < 0 || ny >= n) return;
	visit[nx][ny] = true;
	p[1].push_back(map[nx][ny]);
	dfs2(nx, ny, cnt + 1);
	visit[nx][ny] = false;
	p[1].pop_back();
}
void dfs1(int x, int y, int cnt, int x2, int y2)
{
	
	if (cnt == m) {
		dfs2(x2, y2, 1);
		return;
	}
	int nx = x + dx[0], ny = y + dy[0];
	if (visit[nx][ny] == true) return;
	if (nx < 0 || nx >= n || ny < 0 || ny >= n) return;
	visit[nx][ny] = true;
	p[0].push_back(map[nx][ny]);
	dfs1(nx, ny, cnt + 1,x2,y2);
	visit[nx][ny] = false;
	p[0].pop_back();
}

void solve()
{
	for (int x1 = 0; x1 < n; x1++) {
		for (int y1 = 0; y1 < n; y1++) {
			for (int x2 = x1; x2 < n; x2++) {
				for (int y2 = 0; y2 < n; y2++) {
					if (x1 == x2 && y1 == y2) continue;
					p[0].clear();
					p[1].clear();
					memset(visit, false, sizeof(visit));
					tmax1 = tmax2 = 0;
					visit[x1][y1] = visit[x2][y2] = true;
					p[0].push_back(map[x1][y1]);
					p[1].push_back(map[x2][y2]);
					dfs1(x1, y1, 1, x2, y2);
				}

			}
		}

	}
}
int main(int argc, char** argv)
{
	int test_case;
	int T;
	//freopen("input.txt", "r", stdin);
	cin >> T;
	for (test_case = 1; test_case <= T; ++test_case)
	{
		answer = 0;

		cin >> n >> m >> c;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				cin >> map[i][j];
			}
		}
		solve();


		cout << '#' << test_case << ' ' << answer << '\n';
	}

	return 0;//정상종료시 반드시 0을 리턴해야합니다.
}

